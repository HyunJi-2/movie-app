{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","baseOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","potato","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAkEA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAqBzBC,MAnEf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,OAAO,gBCmEhBC,6MAvGXC,MAAQ,KAgERC,cAAgB,WAWZ,OAVeC,EAAKF,MAAMG,OAAOb,IAAI,SAACc,GAElC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACHxB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAM5BoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYb,EAAKc,WADjB,OACHb,EADGU,EAAAI,KAETf,EAAKgB,SAAS,CACVf,WAHK,wBAAAU,EAAAM,SAAAT,QAObM,SAAW,WACP,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA5B1BG,KAAKpB,8CA+BA,IACGN,EAAW0B,KAAK7B,MAAhBG,OACR,OACI1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAE5BA,EAAS0B,KAAK5B,gBAAkB,qBAtG/B6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.c214f231.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './scss/Movie.scss';\r\n\r\n/* 똑똑한 컴포넌트. state이 있음\r\nclass Movie extends Component{\r\n\r\n    static propTypes= {\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MoviePoster poster={this.props.poster}/>\r\n                <h1>{this.props.title}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}*/\r\n\r\n// 멍청한 컴포넌트. state이 없음\r\n// return을 하기 위해 존재. 1개의 props만 있고 1개의 html 태그만 필요. function render 없고, 라이프사이클도 없음!@\r\n// functional 컴포넌트라서 this가 필요 없음. 이미 props를 쓰니까\r\n// html을 return 해야 할 뿐. state을 잃게 됨. 업데이트 하고 사라짐 .\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis=' ...'\r\n                        trimRight\r\n                        baseOn='letters'\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\nclass MoviePoster extends Component{\r\n    static propTypes ={\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <img src={this.props.poster} alt=\"\" />\r\n        )\r\n    }\r\n}*/\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n    // Render : componentWillMount() -> render() -> componentDidMount() / 컴포넌트가 존재하기 시작할때 작동\n    // Update :  componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n    state = {\n        // greeting : 'hello!',\n    }\n\n    componentDidMount(){\n        /*\n        setTimeout(() =>{\n             // this.state.greeting = 'someting' / state 직접적으로 수정하면 안됨. steSatet를 사용해야함.\n             this.setState({\n                 greeting: 'hello again!'\n             });\n         }, 2000); */\n        // setTimeout(function(){      옛날 자바스크립트\n        /*\n        setTimeout(() => {          // 최신 자바스크립트\n            this.setState({\n                // movies: [\n                //     ...this.state.movies,   // 이전 영화 리스트를 그대로 두고,\n                //     {\n                //         title: \"Trainspotting\",\n                //         poster: \"https://t1.daumcdn.net/movie/6b13dfe4b12ba33683a7ffe066b6e713487c6ca4\"\n                //     }\n                // ]\n\n                movies: [\n                    {\n                        title: \"Matrix\",\n                        poster: \"http://ticketimage.interpark.com/Movie/still_image/V16/V1601447p_s01.gif\"\n                    },\n                    {\n                        title: \"Oldboy\",\n                        poster: \"http://movie.phinf.naver.net/20111222_177/1324537084439rmrVk_JPEG/movie_image.jpg\",\n                    },\n                    {\n                        title: \"Full Metal Jacket\",\n                        poster: \"https://img1.daumcdn.net/thumb/R338x491/?fname=http://t1.daumcdn.net/cfile/205CF91249EC79F00F\"\n                    },\n                    {\n                        title: \"Star Wars\",\n                        poster: \"http://moonhak.co.kr/home/wp-content/uploads/bookcover/%EC%8A%A4%ED%83%80%EC%9B%8C%EC%A6%88-%EC%94%A8%EB%84%A4%EC%95%84%ED%8A%B84_%ED%91%9C1_web.jpg\"\n                    },\n                    {\n                        title: \"Trainspotting\",\n                        poster: \"https://t1.daumcdn.net/movie/6b13dfe4b12ba33683a7ffe066b6e713487c6ca4\"\n                    }\n                ]\n            })\n        }, 1000);   // 1초 후에 새로운 영화가 생성\n\n\n        fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n        .then(potato => potato.json()) // 1개의 attribute만 주고 object 임.\n        .then(json => {\n            this.setState({\n                movies: jsoan.adte.movies\n            })\n            // .then(() => .then())\n            // CALLBACK HELL!   then 안에 then 안에 then ...\n        }) */\n        \n        // 한군데에 몰려있는 것 보다는 function들이 각기 다른 장소에 있는 것이 좋음. 나눠라!!!\n        this._getMovies();  // 두번째작업, get movies라는 function을 씀.\n    }\n\n    _renderMovies = () => { // 언더스코프를 쓰는 이유 : 리액트 자체 기능과 나의 기능에 차이를 두기 위해서. 내가 만들었음!!\n        const movies = this.state.movies.map((movie) => {\n            // console.log(movie);\n            return <Movie\n                title={movie.title_english}\n                poster={movie.medium_cover_image}\n                key={movie.id}    // 컴포넌트의 key는 index를 사용하면 느림\n                genres={movie.genres}\n                synopsis={movie.synopsis}\n            />\n        });\n        return movies\n    };\n\n    _getMovies = async () => {  // asynchronous function\n        const movies = await this._callApi();   // 세번째작업, 안에 movies라는 이름의 const variable을 생성. 그리고 call api 작업이 완료 되고 return 하기를 await 함\n        this.setState({\n            movies\n        });\n    };\n\n    _callApi = () => {  // 첫번째작업, fetch를 call api로 변경\n        return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n        .then(potato => potato.json())\n        .then(json => json.data.movies)\n        .catch(err => console.log(err));\n    };\n\n    render() {\n        const { movies } = this.state;\n        return (\n            <div className={movies ? \"App\" : \"App--loading\"}>\n                {/*{this.state.greeting}*/}\n                {movies ? this._renderMovies() : 'Loading...'}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}